{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"LR1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0412 \u044d\u0442\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0431\u044b\u043b\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430-\u0442\u0430\u0439\u043c-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0438\u043c \u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0442\u044c \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u043a\u0430\u0436\u0434\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u0438\u0438 \u043a \u0434\u0435\u0434\u043b\u0430\u0439\u043d\u0430\u043c, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0435\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 Practices : \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0430\u0431\u043e\u0442 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. Auth : \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e, \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438. DB : \u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0441\u0441\u0438\u044f\u043c. Endpoints : \u041e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. Models : \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f SQLModel. Main : \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u0443\u0435\u0442 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435. Leetcode : \u0417\u0430\u0434\u0430\u0447\u0438 \u0441 leetcode.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1"},{"location":"LR1/#1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1"},{"location":"LR1/#_1","text":"\u0412 \u044d\u0442\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0431\u044b\u043b\u0430 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430-\u0442\u0430\u0439\u043c-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0438\u043c \u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0442\u044c \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u043a\u0430\u0436\u0434\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u0438\u0438 \u043a \u0434\u0435\u0434\u043b\u0430\u0439\u043d\u0430\u043c, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0435\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"LR1/#_2","text":"Practices : \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0430\u0431\u043e\u0442 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. Auth : \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e, \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438. DB : \u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0441\u0441\u0438\u044f\u043c. Endpoints : \u041e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. Models : \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f SQLModel. Main : \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u0443\u0435\u0442 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435. Leetcode : \u0417\u0430\u0434\u0430\u0447\u0438 \u0441 leetcode.","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430"},{"location":"LR1/auth/","text":"\u041c\u043e\u0434\u0443\u043b\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 \u0442\u043e\u043a\u0435\u043d\u044b JWT. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041c\u043e\u0434\u0443\u043b\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0432\u0445\u043e\u0434\u0430 \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0442\u043e\u043a\u0435\u043d\u043e\u0432 JWT. \u041a\u043e\u0434 from fastapi import APIRouter from models import UserBase, User, UserShow, ChangePassword import datetime from fastapi import Security, HTTPException, Depends from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials from passlib.context import CryptContext import jwt from starlette import status from db import get_session from sqlmodel import select security = HTTPBearer() pwd_context = CryptContext(schemes=[\"bcrypt\"]) secret_key = \"supersecret\" def get_password_hash(password): return pwd_context.hash(password) def verify_password(password, hashed_password): return pwd_context.verify(password, hashed_password) def encode_token(user_id): payload = { \"exp\": datetime.datetime.utcnow() + datetime.timedelta(hours=8), \"iat\": datetime.datetime.utcnow(), \"sub\": user_id, } return jwt.encode(payload, secret_key, algorithm=\"HS256\") def decode_token(token): try: payload = jwt.decode(token, secret_key, algorithms=[\"HS256\"]) return payload[\"sub\"] except jwt.ExpiredSignatureError: raise HTTPException(status_code=401, detail=\"Expired signature\") except jwt.InvalidTokenError: raise HTTPException(status_code=401, detail=\"Invalid token\") def auth_wrapper(auth: HTTPAuthorizationCredentials = Security(security)): return decode_token(auth.credentials) def get_current_user( auth: HTTPAuthorizationCredentials = Security(security), session=Depends(get_session), ): credentials_exception = HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Could not validate credentials\", ) username = decode_token(auth.credentials) if username is None: raise credentials_exception user = session.exec(select(User).where(User.username == username)).first() if user is None: raise credentials_exception return user auth_router = APIRouter() @auth_router.post(\"/register\", status_code=201) def register(user: UserBase, session=Depends(get_session)): users = session.exec(select(User)).all() if any(x.username == user.username for x in users): raise HTTPException(status_code=400, detail=\"Username is taken\") hashed_pwd = get_password_hash(user.password) user = User(username=user.username, password=hashed_pwd) session.add(user) session.commit() return {\"status\": 201, \"message\": \"Created\"} @auth_router.post(\"/login\") def login(user: UserBase, session=Depends(get_session)): user_found = session.exec( select(User).where(User.username == user.username) ).first() if not user_found: raise HTTPException(status_code=401, detail=\"Invalid username and/or password\") verified = verify_password(user.password, user_found.password) if not verified: raise HTTPException(status_code=401, detail=\"Invalid username and/or password\") token = encode_token(user_found.username) return {\"token\": token} @auth_router.get(\"/user\", response_model=UserShow) def get_current_user(user: User = Depends(get_current_user)) -> User: return user @auth_router.patch(\"/me/change-password\") def change_password( change_password: ChangePassword, session=Depends(get_session), current=Depends(get_current_user), ): found_user = session.get(User, current.id) if not found_user: raise HTTPException(status_code=404, detail=\"User not found\") verified = verify_password(change_password.old_password, found_user.password) if not verified: raise HTTPException(status_code=400, detail=\"Invalid old password\") hashed_pwd = get_password_hash(change_password.new_password) found_user.password = hashed_pwd session.add(found_user) session.commit() session.refresh(found_user) return {\"status\": 200, \"message\": \"password changed successfully\"}","title":"\u041c\u043e\u0434\u0443\u043b\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438"},{"location":"LR1/auth/#_1","text":"\u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 \u0442\u043e\u043a\u0435\u043d\u044b JWT.","title":"\u041c\u043e\u0434\u0443\u043b\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438"},{"location":"LR1/auth/#_2","text":"\u041c\u043e\u0434\u0443\u043b\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0432\u0445\u043e\u0434\u0430 \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0442\u043e\u043a\u0435\u043d\u043e\u0432 JWT.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"LR1/auth/#_3","text":"from fastapi import APIRouter from models import UserBase, User, UserShow, ChangePassword import datetime from fastapi import Security, HTTPException, Depends from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials from passlib.context import CryptContext import jwt from starlette import status from db import get_session from sqlmodel import select security = HTTPBearer() pwd_context = CryptContext(schemes=[\"bcrypt\"]) secret_key = \"supersecret\" def get_password_hash(password): return pwd_context.hash(password) def verify_password(password, hashed_password): return pwd_context.verify(password, hashed_password) def encode_token(user_id): payload = { \"exp\": datetime.datetime.utcnow() + datetime.timedelta(hours=8), \"iat\": datetime.datetime.utcnow(), \"sub\": user_id, } return jwt.encode(payload, secret_key, algorithm=\"HS256\") def decode_token(token): try: payload = jwt.decode(token, secret_key, algorithms=[\"HS256\"]) return payload[\"sub\"] except jwt.ExpiredSignatureError: raise HTTPException(status_code=401, detail=\"Expired signature\") except jwt.InvalidTokenError: raise HTTPException(status_code=401, detail=\"Invalid token\") def auth_wrapper(auth: HTTPAuthorizationCredentials = Security(security)): return decode_token(auth.credentials) def get_current_user( auth: HTTPAuthorizationCredentials = Security(security), session=Depends(get_session), ): credentials_exception = HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Could not validate credentials\", ) username = decode_token(auth.credentials) if username is None: raise credentials_exception user = session.exec(select(User).where(User.username == username)).first() if user is None: raise credentials_exception return user auth_router = APIRouter() @auth_router.post(\"/register\", status_code=201) def register(user: UserBase, session=Depends(get_session)): users = session.exec(select(User)).all() if any(x.username == user.username for x in users): raise HTTPException(status_code=400, detail=\"Username is taken\") hashed_pwd = get_password_hash(user.password) user = User(username=user.username, password=hashed_pwd) session.add(user) session.commit() return {\"status\": 201, \"message\": \"Created\"} @auth_router.post(\"/login\") def login(user: UserBase, session=Depends(get_session)): user_found = session.exec( select(User).where(User.username == user.username) ).first() if not user_found: raise HTTPException(status_code=401, detail=\"Invalid username and/or password\") verified = verify_password(user.password, user_found.password) if not verified: raise HTTPException(status_code=401, detail=\"Invalid username and/or password\") token = encode_token(user_found.username) return {\"token\": token} @auth_router.get(\"/user\", response_model=UserShow) def get_current_user(user: User = Depends(get_current_user)) -> User: return user @auth_router.patch(\"/me/change-password\") def change_password( change_password: ChangePassword, session=Depends(get_session), current=Depends(get_current_user), ): found_user = session.get(User, current.id) if not found_user: raise HTTPException(status_code=404, detail=\"User not found\") verified = verify_password(change_password.old_password, found_user.password) if not verified: raise HTTPException(status_code=400, detail=\"Invalid old password\") hashed_pwd = get_password_hash(change_password.new_password) found_user.password = hashed_pwd session.add(found_user) session.commit() session.refresh(found_user) return {\"status\": 200, \"message\": \"password changed successfully\"}","title":"\u041a\u043e\u0434"},{"location":"LR1/db/","text":"\u041c\u043e\u0434\u0443\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0435\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041c\u043e\u0434\u0443\u043b\u044c \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u041a\u043e\u0434 from sqlmodel import SQLModel, Session, create_engine import os from dotenv import load_dotenv load_dotenv() engine = create_engine(os.getenv(\"DB_URL\"), echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session","title":"\u041c\u043e\u0434\u0443\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"LR1/db/#_1","text":"\u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0435\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b.","title":"\u041c\u043e\u0434\u0443\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"LR1/db/#_2","text":"\u041c\u043e\u0434\u0443\u043b\u044c \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u043c\u0438.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"LR1/db/#_3","text":"from sqlmodel import SQLModel, Session, create_engine import os from dotenv import load_dotenv load_dotenv() engine = create_engine(os.getenv(\"DB_URL\"), echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session","title":"\u041a\u043e\u0434"},{"location":"LR1/endpoints/","text":"\u041c\u043e\u0434\u0443\u043b\u044c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 API \u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438, \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f\u043c\u0438 \u0438 \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f\u043c\u0438. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041c\u043e\u0434\u0443\u043b\u044c \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b API \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f, \u0447\u0442\u0435\u043d\u0438\u044f, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447, \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u0438 \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439. \u041a\u043e\u0434 import datetime from fastapi import APIRouter, HTTPException, Depends from models import ( TaskDefault, Task, TaskShow, ScheduleDefault, ScheduleShow, Schedule, ReminderDefault, ReminderShow, Reminder, User ) from db import get_session from typing_extensions import TypedDict logic_router = APIRouter() @logic_router.post(\"/task-create\") def task_create(task: TaskDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Task}): task = Task.model_validate(task) session.add(task) session.commit() session.refresh(task) return {\"status\": 200, \"data\": task} @logic_router.get(\"/list-tasks\") def tasks_list(session=Depends(get_session)) -> list[Task]: return session.query(Task).all() @logic_router.get(\"/task/{task_id}\", response_model=TaskShow) def task_get(task_id: int, session=Depends(get_session)): obj = session.get(Task, task_id) if obj is None: raise HTTPException(status_code=404, detail=\"task not found\") return obj @logic_router.patch(\"/task/update/{task_id}\") def task_update(task_id: int, task: TaskDefault, session=Depends(get_session)) -> Task: db_task = session.get(Task, task_id) if not db_task: raise HTTPException(status_code=404, detail=\"task not found\") task_data = task.model_dump(exclude_unset=True) for key, value in task_data.items(): setattr(db_task, key, value) session.add(db_task) session.commit() session.refresh(db_task) return db_task @logic_router.delete(\"/task/delete/{task_id}\") def task_delete(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") session.delete(task) session.commit() return {\"ok\": True} @logic_router.post(\"/schedule-create\") def schedule_create(schedule: ScheduleDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Schedule}): schedule = Schedule.model_validate(schedule) session.add(schedule) session.commit() session.refresh(schedule) return {\"status\": 200, \"data\": schedule} @logic_router.get(\"/list-schedules\") def schedules_list(session=Depends(get_session)) -> list[Schedule]: return session.query(Schedule).all() @logic_router.get(\"/schedule/{schedule_id}\", response_model=ScheduleShow) def schedule_get(schedule_id: int, session=Depends(get_session)): obj = session.get(Schedule, schedule_id) if obj is None: raise HTTPException(status_code=404, detail=\"schedule not found\") return obj @logic_router.patch(\"/schedule/update/{schedule_id}\") def schedule_update(schedule_id: int, schedule: ScheduleDefault, session=Depends(get_session)) -> Schedule: db_schedule = session.get(Schedule, schedule_id) if not db_schedule: raise HTTPException(status_code=404, detail=\"schedule not found\") schedule_data = schedule.model_dump(exclude_unset=True) for key, value in schedule_data.items(): setattr(db_schedule, key, value) session.add(db_schedule) session.commit() session.refresh(db_schedule) return db_schedule @logic_router.delete(\"/schedule/delete/{schedule_id}\") def schedule_delete(schedule_id: int, session=Depends(get_session)): schedule = session.get(Schedule, schedule_id) if not schedule: raise HTTPException(status_code=404, detail=\"schedule not found\") session.delete(schedule) session.commit() return {\"ok\": True} @logic_router.post(\"/reminder-create\") def reminder_create(reminder: ReminderDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Reminder}): reminder = Reminder.model_validate(reminder) session.add(reminder) session.commit() session.refresh(reminder) return {\"status\": 200, \"data\": reminder} @logic_router.get(\"/list-reminders\") def reminders_list(session=Depends(get_session)) -> list[Reminder]: return session.query(Reminder).all() @logic_router.get(\"/reminder/{reminder_id}\", response_model=ReminderShow) def reminder_get(reminder_id: int, session=Depends(get_session)): obj = session.get(Reminder, reminder_id) if obj is None: raise HTTPException(status_code=404, detail=\"reminder not found\") return obj @logic_router.patch(\"/reminder/update/{reminder_id}\") def reminder_update(reminder_id: int, reminder: ReminderDefault, session=Depends(get_session)) -> Reminder: db_reminder = session.get(Reminder, reminder_id) if not db_reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") reminder_data = reminder.model_dump(exclude_unset=True) for key, value in reminder_data.items(): setattr(db_reminder, key, value) session.add(db_reminder) session.commit() session.refresh(db_reminder) return db_reminder @logic_router.delete(\"/reminder/delete/{reminder_id}\") def reminder_delete(reminder_id: int, session=Depends(get_session)): reminder = session.get(Reminder, reminder_id) if not reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") session.delete(reminder) session.commit() return {\"ok\": True} @logic_router.get(\"/user/{user_id}/schedules\") def user_schedules(user_id: int, session=Depends(get_session)) -> list[Schedule]: user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"user not found\") return session.query(Schedule).filter(Schedule.user_id == user_id).all() @logic_router.patch(\"/task/{task_id}/add-time\") def add_time_to_task(task_id: int, time_spent: int, session=Depends(get_session)) -> Task: task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") if task.time_spent is None: task.time_spent = 0 task.time_spent += time_spent session.add(task) session.commit() session.refresh(task) return task @logic_router.get(\"/user/{user_id}/time-analysis\") def user_time_analysis(user_id: int, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"time_spent\": dict}): user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"user not found\") tasks = session.query(Task).filter(Task.user_id == user_id).all() time = { task.id: task.time_spent if task.time_spent is not None else 0 for task in tasks } return {\"status\": 200, \"time_spent\": time} @logic_router.post(\"/reminder/{reminder_id}/copy-for-task/{task_id}\") def copy_reminder_for_task(reminder_id: int, task_id: int, session=Depends(get_session)): reminder = session.get(Reminder, reminder_id) if not reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") new_reminder = Reminder( task_id=task_id, remind_at=reminder.remind_at, user_id=reminder.user_id ) session.add(new_reminder) session.commit() session.refresh(new_reminder) return {\"status\": 200, \"message\": \"Reminder copied for new task successfully\"}","title":"\u041c\u043e\u0434\u0443\u043b\u044c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 API"},{"location":"LR1/endpoints/#api","text":"\u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0441 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438, \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f\u043c\u0438 \u0438 \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f\u043c\u0438.","title":"\u041c\u043e\u0434\u0443\u043b\u044c \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u043e\u0432 API"},{"location":"LR1/endpoints/#_1","text":"\u041c\u043e\u0434\u0443\u043b\u044c \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b API \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f, \u0447\u0442\u0435\u043d\u0438\u044f, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447, \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0439 \u0438 \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"LR1/endpoints/#_2","text":"import datetime from fastapi import APIRouter, HTTPException, Depends from models import ( TaskDefault, Task, TaskShow, ScheduleDefault, ScheduleShow, Schedule, ReminderDefault, ReminderShow, Reminder, User ) from db import get_session from typing_extensions import TypedDict logic_router = APIRouter() @logic_router.post(\"/task-create\") def task_create(task: TaskDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Task}): task = Task.model_validate(task) session.add(task) session.commit() session.refresh(task) return {\"status\": 200, \"data\": task} @logic_router.get(\"/list-tasks\") def tasks_list(session=Depends(get_session)) -> list[Task]: return session.query(Task).all() @logic_router.get(\"/task/{task_id}\", response_model=TaskShow) def task_get(task_id: int, session=Depends(get_session)): obj = session.get(Task, task_id) if obj is None: raise HTTPException(status_code=404, detail=\"task not found\") return obj @logic_router.patch(\"/task/update/{task_id}\") def task_update(task_id: int, task: TaskDefault, session=Depends(get_session)) -> Task: db_task = session.get(Task, task_id) if not db_task: raise HTTPException(status_code=404, detail=\"task not found\") task_data = task.model_dump(exclude_unset=True) for key, value in task_data.items(): setattr(db_task, key, value) session.add(db_task) session.commit() session.refresh(db_task) return db_task @logic_router.delete(\"/task/delete/{task_id}\") def task_delete(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") session.delete(task) session.commit() return {\"ok\": True} @logic_router.post(\"/schedule-create\") def schedule_create(schedule: ScheduleDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Schedule}): schedule = Schedule.model_validate(schedule) session.add(schedule) session.commit() session.refresh(schedule) return {\"status\": 200, \"data\": schedule} @logic_router.get(\"/list-schedules\") def schedules_list(session=Depends(get_session)) -> list[Schedule]: return session.query(Schedule).all() @logic_router.get(\"/schedule/{schedule_id}\", response_model=ScheduleShow) def schedule_get(schedule_id: int, session=Depends(get_session)): obj = session.get(Schedule, schedule_id) if obj is None: raise HTTPException(status_code=404, detail=\"schedule not found\") return obj @logic_router.patch(\"/schedule/update/{schedule_id}\") def schedule_update(schedule_id: int, schedule: ScheduleDefault, session=Depends(get_session)) -> Schedule: db_schedule = session.get(Schedule, schedule_id) if not db_schedule: raise HTTPException(status_code=404, detail=\"schedule not found\") schedule_data = schedule.model_dump(exclude_unset=True) for key, value in schedule_data.items(): setattr(db_schedule, key, value) session.add(db_schedule) session.commit() session.refresh(db_schedule) return db_schedule @logic_router.delete(\"/schedule/delete/{schedule_id}\") def schedule_delete(schedule_id: int, session=Depends(get_session)): schedule = session.get(Schedule, schedule_id) if not schedule: raise HTTPException(status_code=404, detail=\"schedule not found\") session.delete(schedule) session.commit() return {\"ok\": True} @logic_router.post(\"/reminder-create\") def reminder_create(reminder: ReminderDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Reminder}): reminder = Reminder.model_validate(reminder) session.add(reminder) session.commit() session.refresh(reminder) return {\"status\": 200, \"data\": reminder} @logic_router.get(\"/list-reminders\") def reminders_list(session=Depends(get_session)) -> list[Reminder]: return session.query(Reminder).all() @logic_router.get(\"/reminder/{reminder_id}\", response_model=ReminderShow) def reminder_get(reminder_id: int, session=Depends(get_session)): obj = session.get(Reminder, reminder_id) if obj is None: raise HTTPException(status_code=404, detail=\"reminder not found\") return obj @logic_router.patch(\"/reminder/update/{reminder_id}\") def reminder_update(reminder_id: int, reminder: ReminderDefault, session=Depends(get_session)) -> Reminder: db_reminder = session.get(Reminder, reminder_id) if not db_reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") reminder_data = reminder.model_dump(exclude_unset=True) for key, value in reminder_data.items(): setattr(db_reminder, key, value) session.add(db_reminder) session.commit() session.refresh(db_reminder) return db_reminder @logic_router.delete(\"/reminder/delete/{reminder_id}\") def reminder_delete(reminder_id: int, session=Depends(get_session)): reminder = session.get(Reminder, reminder_id) if not reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") session.delete(reminder) session.commit() return {\"ok\": True} @logic_router.get(\"/user/{user_id}/schedules\") def user_schedules(user_id: int, session=Depends(get_session)) -> list[Schedule]: user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"user not found\") return session.query(Schedule).filter(Schedule.user_id == user_id).all() @logic_router.patch(\"/task/{task_id}/add-time\") def add_time_to_task(task_id: int, time_spent: int, session=Depends(get_session)) -> Task: task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") if task.time_spent is None: task.time_spent = 0 task.time_spent += time_spent session.add(task) session.commit() session.refresh(task) return task @logic_router.get(\"/user/{user_id}/time-analysis\") def user_time_analysis(user_id: int, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"time_spent\": dict}): user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"user not found\") tasks = session.query(Task).filter(Task.user_id == user_id).all() time = { task.id: task.time_spent if task.time_spent is not None else 0 for task in tasks } return {\"status\": 200, \"time_spent\": time} @logic_router.post(\"/reminder/{reminder_id}/copy-for-task/{task_id}\") def copy_reminder_for_task(reminder_id: int, task_id: int, session=Depends(get_session)): reminder = session.get(Reminder, reminder_id) if not reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") new_reminder = Reminder( task_id=task_id, remind_at=reminder.remind_at, user_id=reminder.user_id ) session.add(new_reminder) session.commit() session.refresh(new_reminder) return {\"status\": 200, \"message\": \"Reminder copied for new task successfully\"}","title":"\u041a\u043e\u0434"},{"location":"LR1/main/","text":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0433\u043b\u0430\u0432\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u044b \u0432\u0441\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0438 \u043c\u043e\u0434\u0435\u043b\u0438. \u041a\u043e\u0434 from fastapi import FastAPI import uvicorn from db import init_db from endpoints import logic_router from auth import auth_router app = FastAPI() app.include_router(logic_router, prefix=\"/api\", tags=[\"main\"]) app.include_router(auth_router, prefix=\"/auth\", tags=[\"auth\"]) @app.on_event(\"startup\") def on_startup(): init_db() if __name__ == '__main__': uvicorn.run('main:app', host=\"localhost\", port=8000, reload=True)","title":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435"},{"location":"LR1/main/#_1","text":"","title":"\u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435"},{"location":"LR1/main/#_2","text":"\u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0433\u043b\u0430\u0432\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u044b \u0432\u0441\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0438 \u043c\u043e\u0434\u0435\u043b\u0438.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"LR1/main/#_3","text":"from fastapi import FastAPI import uvicorn from db import init_db from endpoints import logic_router from auth import auth_router app = FastAPI() app.include_router(logic_router, prefix=\"/api\", tags=[\"main\"]) app.include_router(auth_router, prefix=\"/auth\", tags=[\"auth\"]) @app.on_event(\"startup\") def on_startup(): init_db() if __name__ == '__main__': uvicorn.run('main:app', host=\"localhost\", port=8000, reload=True)","title":"\u041a\u043e\u0434"},{"location":"LR1/models/","text":"\u041c\u043e\u0434\u0435\u043b\u0438 \u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0439, \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439 \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041c\u043e\u0434\u0443\u043b\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0445, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b 1:M \u0438 M:M. \u041a\u043e\u0434 import datetime from pydantic import BaseModel from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship class Priority(Enum): high = \"high\" medium = \"medium\" low = \"low\" no_priority = \"no_priority\" class TaskDefault(SQLModel): title: str description: Optional[str] = None deadline: datetime.date priority: Priority = Priority.no_priority user_id: int = Field(default=None, foreign_key=\"user.id\") class TaskShow(TaskDefault): title: str deadline: datetime.date priority: Priority time_spent: Optional[int] = None class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) time_spent: Optional[int] = None user: Optional[\"User\"] = Relationship(back_populates=\"tasks\") schedules: Optional[List[\"Schedule\"]] = Relationship(back_populates=\"task\") reminders: Optional[List[\"Reminder\"]] = Relationship(back_populates=\"task\") class ScheduleDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") date: datetime.date start_time: datetime.time end_time: datetime.time user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\") class ScheduleShow(ScheduleDefault): task: Optional[\"Task\"] = None class Schedule(ScheduleDefault, table=True): id: int = Field(default=None, primary_key=True) task: Optional[\"Task\"] = Relationship(back_populates=\"schedules\") user: Optional[\"User\"] = Relationship(back_populates=\"schedules\") class ReminderDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") remind_at: datetime.datetime user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\") class ReminderShow(ReminderDefault): task: Optional[Task] = None class UserBase(SQLModel): username: str password: str class User(UserBase, table=True): id: int = Field(default=None, primary_key=True) tasks: Optional[List[\"Task\"]] = Relationship( back_populates=\"user\", sa_relationship_kwargs={\"cascade\": \"all, delete\"} ) schedules: Optional[List[\"Schedule\"]] = Relationship( back_populates=\"user\", sa_relationship_kwargs={\"cascade\": \"all, delete\"} ) reminders: Optional[List[\"Reminder\"]] = Relationship( back_populates=\"user\", sa_relationship_kwargs={\"cascade\": \"all, delete\"} ) class Reminder(ReminderDefault, table=True): id: int = Field(default=None, primary_key=True) task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\") task: Optional[\"Task\"] = Relationship(back_populates=\"reminders\") user: Optional[User] = Relationship(back_populates=\"reminders\") class UserShow(UserBase): id: int tasks: Optional[List[\"Task\"]] = None schedules: Optional[List[\"Schedule\"]] = None reminders: Optional[List[\"Reminder\"]] = None class ChangePassword(SQLModel): old_password: str new_password: str","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"LR1/models/#_1","text":"\u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447, \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0439, \u043d\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439 \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439.","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"LR1/models/#_2","text":"\u041c\u043e\u0434\u0443\u043b\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0445, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b 1:M \u0438 M:M.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"LR1/models/#_3","text":"import datetime from pydantic import BaseModel from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship class Priority(Enum): high = \"high\" medium = \"medium\" low = \"low\" no_priority = \"no_priority\" class TaskDefault(SQLModel): title: str description: Optional[str] = None deadline: datetime.date priority: Priority = Priority.no_priority user_id: int = Field(default=None, foreign_key=\"user.id\") class TaskShow(TaskDefault): title: str deadline: datetime.date priority: Priority time_spent: Optional[int] = None class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) time_spent: Optional[int] = None user: Optional[\"User\"] = Relationship(back_populates=\"tasks\") schedules: Optional[List[\"Schedule\"]] = Relationship(back_populates=\"task\") reminders: Optional[List[\"Reminder\"]] = Relationship(back_populates=\"task\") class ScheduleDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") date: datetime.date start_time: datetime.time end_time: datetime.time user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\") class ScheduleShow(ScheduleDefault): task: Optional[\"Task\"] = None class Schedule(ScheduleDefault, table=True): id: int = Field(default=None, primary_key=True) task: Optional[\"Task\"] = Relationship(back_populates=\"schedules\") user: Optional[\"User\"] = Relationship(back_populates=\"schedules\") class ReminderDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") remind_at: datetime.datetime user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\") class ReminderShow(ReminderDefault): task: Optional[Task] = None class UserBase(SQLModel): username: str password: str class User(UserBase, table=True): id: int = Field(default=None, primary_key=True) tasks: Optional[List[\"Task\"]] = Relationship( back_populates=\"user\", sa_relationship_kwargs={\"cascade\": \"all, delete\"} ) schedules: Optional[List[\"Schedule\"]] = Relationship( back_populates=\"user\", sa_relationship_kwargs={\"cascade\": \"all, delete\"} ) reminders: Optional[List[\"Reminder\"]] = Relationship( back_populates=\"user\", sa_relationship_kwargs={\"cascade\": \"all, delete\"} ) class Reminder(ReminderDefault, table=True): id: int = Field(default=None, primary_key=True) task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\") task: Optional[\"Task\"] = Relationship(back_populates=\"reminders\") user: Optional[User] = Relationship(back_populates=\"reminders\") class UserShow(UserBase): id: int tasks: Optional[List[\"Task\"]] = None schedules: Optional[List[\"Schedule\"]] = None reminders: Optional[List[\"Reminder\"]] = None class ChangePassword(SQLModel): old_password: str new_password: str","title":"\u041a\u043e\u0434"},{"location":"LR1/practices/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0438 \u0442\u0430\u043a\u0436\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443-\u0442\u0430\u0439\u043c-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430. \u041f\u04201 \u0411\u044b\u043b\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e: \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0431\u0430\u0437\u0443 \u0434\u043b\u044f \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b (2-3 \u0437\u0430\u043f\u0438\u0441\u0438), \u043f\u043e \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0438 \u0441 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u043e\u0439 (\u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u043e\u0434\u0438\u043d\u043e\u0447\u043d\u044b\u0439 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432) \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0432 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0434\u043b\u044f \u0441\u0432\u043e\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 API \u0434\u043b\u044f \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 db.py temp_db = [ { \"task_id\": 1, \"task\": \"Complete project\", \"description\": \"Finish the task manager app\", \"deadline\": \"2022-12-31\", \"priority\": \"High\", \"time_spent\": 120, }, { \"task_id\": 2, \"task\": \"Write documentation\", \"description\": \"Document the task manager app\", \"deadline\": \"2022-12-31\", \"priority\": \"Medium\", \"time_spent\": 50, }, { \"task_id\": 3, \"task\": \"Test application\", \"description\": \"Test the task manager app\", \"deadline\": \"2022-12-31\", \"priority\": \"Low\", \"time_spent\": 0, }, ] main.py from fastapi import FastAPI from models import * from typing_extensions import TypedDict from db import temp_db from typing import Optional, List import uvicorn app = FastAPI() @app.get(\"/\") def hello(): return \"Hello, user!\" @app.post(\"/create_task\") def create_task(task: Task): temp_db.append(task) return {\"status\": 200, \"data\": task} @app.put(\"/update_task/{task_id}\") def update_task(task_id: int, task: TaskDefault): for task in temp_db: if task[\"task_id\"] == task_id: task[\"title\"] = task[\"title\"] task[\"description\"] = task[\"description\"] task[\"deadline\"] = task[\"deadline\"] task[\"priority\"] = task[\"priority\"] task[\"time_spent\"] = task[\"time_spent\"] return {\"status\": 200, \"data\": task} else: return {\"status\": 404, \"data\": \"Task not found\"} @app.delete(\"/delete_task/{task_id}\") def delete_task(task_id: int): for task in temp_db: if task[\"task_id\"] == task_id: temp_db.remove(task) return {\"status\": 200, \"data\": \"Task deleted\"} else: return {\"status\": 404, \"data\": \"Task not found\"} @app.get(\"/tasks\") def get_tasks(): return temp_db @app.get(\"/task/{task_id}\") def get_task(task_id: int): for task in temp_db: if task[\"task_id\"] == task_id: return task return {\"status\": 404, \"data\": \"Task not found\"} @app.get(\"/tasks/{task_id}/time\") def get_task_time(task_id: int): for task in temp_db: if task[\"task_id\"] == task_id: return task[\"time_spent\"] return {\"status\": 404, \"data\": \"Task not found\"} @app.put(\"/tasks/{task_id}/time\") def track_time_spent(task_id: int, time_spent: int): for task in temp_db: if task[\"task_id\"] == task_id: task[\"time_spent\"] = time_spent return {\"status\": 200, \"data\": task} return {\"status\": 404, \"data\": task} models.py import datetime from pydantic import BaseModel from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship class Priority(Enum): high = \"high\" medium = \"medium\" low = \"low\" no_priority = \"no_priority\" class TaskDefault(SQLModel): title: str description: Optional[str] = None deadline: datetime.date priority: Priority = Priority.no_priority class TaskShow(TaskDefault): title: str deadline: datetime.date priority: Priority time_spent: Optional[int] = None class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) time_spent: Optional[int] = None \u041f\u04202 \u0411\u044b\u043b\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e: \u041f\u043e\u0448\u0430\u0433\u043e\u0432\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0411\u0414, \u0410\u041f\u0418 \u0438 \u043c\u043e\u0434\u0435\u043b\u0438, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u0432\u043e\u0435\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u044b\u0432\u0430\u044f\u0441\u044c \u043d\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u0445 \u0432 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 API \u0434\u043b\u044f many-to-many \u0441\u0432\u044f\u0437\u0435\u0439 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\u043c. db.py from sqlmodel import SQLModel, Session, create_engine db_url = 'postgresql://postgres:123@localhost:5432/pr2' engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session endpoints.py import datetime from fastapi import APIRouter, HTTPException, Depends from models import * from db import get_session from typing_extensions import TypedDict from sqlmodel import SQLModel, create_engine from sqlmodel.sql.expression import select app_router = APIRouter() @app_router.post(\"/create_task\", tags=[\"tasks\"]) def create_task(task: Task, session=Depends(get_session)): session.add(task) session.commit() session.refresh(task) return {\"status\": 200, \"data\": task} @app_router.put(\"/update_task/{task_id}\", tags=[\"tasks\"]) def update_task(task_id: int, task: TaskUpdate, session=Depends(get_session)): db_task = session.get(Task, task_id) if not db_task: return ({'status': 404, 'data': 'Task not found'}) task_data = task.model_dump(exclude_unset=True) for key, value in task_data.items(): setattr(db_task, key, value) session.add(db_task) session.commit() session.refresh(db_task) return db_task @app_router.delete(\"/delete_task/{task_id}\", tags=[\"tasks\"]) def delete_task(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: return ({'status': 404, 'data': 'Task not found'}) session.delete(task) session.commit() return {\"ok\": True} @app_router.get(\"/tasks\", tags=[\"tasks\"],) def get_tasks(session=Depends(get_session)): return session.exec(select(Task)).all() @app_router.get(\"/task/{task_id}\", tags=[\"tasks\"]) def get_task(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: return ({'status': 404, 'data': 'Task not found'}) return task @app_router.get(\"/tasks/{task_id}/time\", tags=[\"tasks\"]) def get_task_time(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: return ({'status': 404, 'data': 'Task not found'}) return {\"time_spent\": task.time_spent} @app_router.put(\"/tasks/{task_id}/time\", tags=[\"tasks\"]) def track_time_spent(task_id: int, time_spent: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: return ({'status': 404, 'data': 'Task not found'}) task.time_spent = time_spent session.add(task) session.commit() session.refresh(task) return task main.py from fastapi import FastAPI import uvicorn from db import init_db from endpoints import app_router app = FastAPI() app.include_router(app_router, prefix=\"/api\", tags=[\"main\"]) @app.on_event(\"startup\") def on_startup(): init_db() if __name__ == '__main__': uvicorn.run('main:app', host=\"localhost\", port=8000, reload=True) models.py import datetime from pydantic import BaseModel from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship class Priority(Enum): high = \"high\" medium = \"medium\" low = \"low\" no_priority = \"no_priority\" class TaskDefault(SQLModel): title: str description: Optional[str] = None deadline: datetime.date priority: Priority = Priority.no_priority class TaskShow(TaskDefault): title: str deadline: datetime.date priority: Priority time_spent: Optional[int] = None class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) time_spent: Optional[int] = None schedules: Optional[List[\"Schedule\"]] = Relationship(back_populates=\"task\") reminders: Optional[List[\"Reminder\"]] = Relationship(back_populates=\"task\") class ScheduleDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") date: datetime.date start_time: datetime.time end_time: datetime.time class ScheduleShow(ScheduleDefault): task: Optional[\"Task\"] = None class Schedule(ScheduleDefault, table=True): id: int = Field(default=None, primary_key=True) task: Optional[\"Task\"] = Relationship(back_populates=\"schedules\") class ReminderDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") remind_at: datetime.datetime class ReminderShow(ReminderDefault): task: Optional[Task] = None class Reminder(ReminderDefault, table=True): id: int = Field(default=None, primary_key=True) task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") task: Optional[\"Task\"] = Relationship(back_populates=\"reminders\") \u041f\u04203 \u0411\u044b\u043b\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0441\u0432\u043e\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0432\u0441\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0432 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 alembic.ini URL \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e.env-\u0444\u0430\u0439\u043b\u0430 \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0434\u043e\u0431\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0443. db.py from sqlmodel import SQLModel, Session, create_engine db_url = 'postgresql://postgres:123@localhost:5432/pr3' engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session endpoints.py import datetime from fastapi import APIRouter, HTTPException, Depends from models import ( TaskDefault, Task, TaskShow, ScheduleDefault, ScheduleShow, Schedule, ReminderDefault, ReminderShow, Reminder, ) from db import get_session from typing_extensions import TypedDict logic_router = APIRouter() @logic_router.post(\"/task-create\") def task_create(task: TaskDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Task}): task = Task.model_validate(task) session.add(task) session.commit() session.refresh(task) return {\"status\": 200, \"data\": task} @logic_router.get(\"/list-tasks\") def tasks_list(session=Depends(get_session)) -> list[Task]: return session.query(Task).all() @logic_router.get(\"/task/{task_id}\", response_model=TaskShow) def task_get(task_id: int, session=Depends(get_session)): obj = session.get(Task, task_id) if obj is None: raise HTTPException(status_code=404, detail=\"task not found\") return obj @logic_router.patch(\"/task/update/{task_id}\") def task_update(task_id: int, task: TaskDefault, session=Depends(get_session)) -> Task: db_task = session.get(Task, task_id) if not db_task: raise HTTPException(status_code=404, detail=\"task not found\") task_data = task.model_dump(exclude_unset=True) for key, value in task_data.items(): setattr(db_task, key, value) session.add(db_task) session.commit() session.refresh(db_task) return db_task @logic_router.delete(\"/task/delete/{task_id}\") def task_delete(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") session.delete(task) session.commit() return {\"ok\": True} @logic_router.post(\"/schedule-create\") def schedule_create(schedule: ScheduleDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Schedule}): schedule = Schedule.model_validate(schedule) session.add(schedule) session.commit() session.refresh(schedule) return {\"status\": 200, \"data\": schedule} @logic_router.get(\"/list-schedules\") def schedules_list(session=Depends(get_session)) -> list[Schedule]: return session.query(Schedule).all() @logic_router.get(\"/schedule/{schedule_id}\", response_model=ScheduleShow) def schedule_get(schedule_id: int, session=Depends(get_session)): obj = session.get(Schedule, schedule_id) if obj is None: raise HTTPException(status_code=404, detail=\"schedule not found\") return obj @logic_router.patch(\"/schedule/update/{schedule_id}\") def schedule_update(schedule_id: int, schedule: ScheduleDefault, session=Depends(get_session)) -> Schedule: db_schedule = session.get(Schedule, schedule_id) if not db_schedule: raise HTTPException(status_code=404, detail=\"schedule not found\") schedule_data = schedule.model_dump(exclude_unset=True) for key, value in schedule_data.items(): setattr(db_schedule, key, value) session.add(db_schedule) session.commit() session.refresh(db_schedule) return db_schedule @logic_router.delete(\"/schedule/delete/{schedule_id}\") def schedule_delete(schedule_id: int, session=Depends(get_session)): schedule = session.get(Schedule, schedule_id) if not schedule: raise HTTPException(status_code=404, detail=\"schedule not found\") session.delete(schedule) session.commit() return {\"ok\": True} @logic_router.post(\"/reminder-create\") def reminder_create(reminder: ReminderDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Reminder}): reminder = Reminder.model_validate(reminder) session.add(reminder) session.commit() session.refresh(reminder) return {\"status\": 200, \"data\": reminder} @logic_router.get(\"/list-reminders\") def reminders_list(session=Depends(get_session)) -> list[Reminder]: return session.query(Reminder).all() @logic_router.get(\"/reminder/{reminder_id}\", response_model=ReminderShow) def reminder_get(reminder_id: int, session=Depends(get_session)): obj = session.get(Reminder, reminder_id) if obj is None: raise HTTPException(status_code=404, detail=\"reminder not found\") return obj @logic_router.patch(\"/reminder/update/{reminder_id}\") def reminder_update(reminder_id: int, reminder: ReminderDefault, session=Depends(get_session)) -> Reminder: db_reminder = session.get(Reminder, reminder_id) if not db_reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") reminder_data = reminder.model_dump(exclude_unset=True) for key, value in reminder_data.items(): setattr(db_reminder, key, value) session.add(db_reminder) session.commit() session.refresh(db_reminder) return db_reminder @logic_router.delete(\"/reminder/delete/{reminder_id}\") def reminder_delete(reminder_id: int, session=Depends(get_session)): reminder = session.get(Reminder, reminder_id) if not reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") session.delete(reminder) session.commit() return {\"ok\": True} @logic_router.patch(\"/task/{task_id}/add-time\") def add_time_to_task(task_id: int, time_spent: int, session=Depends(get_session)) -> Task: task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") if task.time_spent is None: task.time_spent = 0 task.time_spent += time_spent session.add(task) session.commit() session.refresh(task) return task @logic_router.post(\"/reminder/{reminder_id}/copy-for-task/{task_id}\") def copy_reminder_for_task(reminder_id: int, task_id: int, session=Depends(get_session)): reminder = session.get(Reminder, reminder_id) if not reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") new_reminder = Reminder( task_id=task_id, remind_at=reminder.remind_at ) session.add(new_reminder) session.commit() session.refresh(new_reminder) return {\"status\": 200, \"message\": \"Reminder copied for new task successfully\"} main.py from fastapi import FastAPI import uvicorn from db import init_db from endpoints import logic_router app = FastAPI() app.include_router(logic_router, prefix=\"/api\", tags=[\"main\"]) @app.on_event(\"startup\") def on_startup(): init_db() if __name__ == \"__main__\": uvicorn.run(\"main:app\", host=\"localhost\", port=8000, reload=True) models.py import datetime from pydantic import BaseModel from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship class Priority(Enum): high = \"high\" medium = \"medium\" low = \"low\" no_priority = \"no_priority\" class TaskDefault(SQLModel): title: str description: Optional[str] = None deadline: datetime.date priority: Priority = Priority.no_priority class TaskShow(TaskDefault): title: str deadline: datetime.date priority: Priority time_spent: Optional[int] = None class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) time_spent: Optional[int] = None schedules: Optional[List[\"Schedule\"]] = Relationship(back_populates=\"task\") reminders: Optional[List[\"Reminder\"]] = Relationship(back_populates=\"task\") class ScheduleDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") date: datetime.date start_time: datetime.time end_time: datetime.time class ScheduleShow(ScheduleDefault): task: Optional[\"Task\"] = None class Schedule(ScheduleDefault, table=True): id: int = Field(default=None, primary_key=True) task: Optional[\"Task\"] = Relationship(back_populates=\"schedules\") class ReminderDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") remind_at: datetime.datetime class ReminderShow(ReminderDefault): task: Optional[Task] = None class Reminder(ReminderDefault, table=True): id: int = Field(default=None, primary_key=True) task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") task: Optional[\"Task\"] = Relationship(back_populates=\"reminders\")","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"LR1/practices/#_1","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"LR1/practices/#_2","text":"\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0438 \u0442\u0430\u043a\u0436\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443-\u0442\u0430\u0439\u043c-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"LR1/practices/#1","text":"\u0411\u044b\u043b\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e: \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0431\u0430\u0437\u0443 \u0434\u043b\u044f \u0433\u043b\u0430\u0432\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b (2-3 \u0437\u0430\u043f\u0438\u0441\u0438), \u043f\u043e \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0438 \u0441 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u043e\u0439 (\u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u043e\u0434\u0438\u043d\u043e\u0447\u043d\u044b\u0439 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432) \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0432 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0434\u043b\u044f \u0441\u0432\u043e\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 API \u0434\u043b\u044f \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430","title":"\u041f\u04201"},{"location":"LR1/practices/#dbpy","text":"temp_db = [ { \"task_id\": 1, \"task\": \"Complete project\", \"description\": \"Finish the task manager app\", \"deadline\": \"2022-12-31\", \"priority\": \"High\", \"time_spent\": 120, }, { \"task_id\": 2, \"task\": \"Write documentation\", \"description\": \"Document the task manager app\", \"deadline\": \"2022-12-31\", \"priority\": \"Medium\", \"time_spent\": 50, }, { \"task_id\": 3, \"task\": \"Test application\", \"description\": \"Test the task manager app\", \"deadline\": \"2022-12-31\", \"priority\": \"Low\", \"time_spent\": 0, }, ]","title":"db.py"},{"location":"LR1/practices/#mainpy","text":"from fastapi import FastAPI from models import * from typing_extensions import TypedDict from db import temp_db from typing import Optional, List import uvicorn app = FastAPI() @app.get(\"/\") def hello(): return \"Hello, user!\" @app.post(\"/create_task\") def create_task(task: Task): temp_db.append(task) return {\"status\": 200, \"data\": task} @app.put(\"/update_task/{task_id}\") def update_task(task_id: int, task: TaskDefault): for task in temp_db: if task[\"task_id\"] == task_id: task[\"title\"] = task[\"title\"] task[\"description\"] = task[\"description\"] task[\"deadline\"] = task[\"deadline\"] task[\"priority\"] = task[\"priority\"] task[\"time_spent\"] = task[\"time_spent\"] return {\"status\": 200, \"data\": task} else: return {\"status\": 404, \"data\": \"Task not found\"} @app.delete(\"/delete_task/{task_id}\") def delete_task(task_id: int): for task in temp_db: if task[\"task_id\"] == task_id: temp_db.remove(task) return {\"status\": 200, \"data\": \"Task deleted\"} else: return {\"status\": 404, \"data\": \"Task not found\"} @app.get(\"/tasks\") def get_tasks(): return temp_db @app.get(\"/task/{task_id}\") def get_task(task_id: int): for task in temp_db: if task[\"task_id\"] == task_id: return task return {\"status\": 404, \"data\": \"Task not found\"} @app.get(\"/tasks/{task_id}/time\") def get_task_time(task_id: int): for task in temp_db: if task[\"task_id\"] == task_id: return task[\"time_spent\"] return {\"status\": 404, \"data\": \"Task not found\"} @app.put(\"/tasks/{task_id}/time\") def track_time_spent(task_id: int, time_spent: int): for task in temp_db: if task[\"task_id\"] == task_id: task[\"time_spent\"] = time_spent return {\"status\": 200, \"data\": task} return {\"status\": 404, \"data\": task}","title":"main.py"},{"location":"LR1/practices/#modelspy","text":"import datetime from pydantic import BaseModel from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship class Priority(Enum): high = \"high\" medium = \"medium\" low = \"low\" no_priority = \"no_priority\" class TaskDefault(SQLModel): title: str description: Optional[str] = None deadline: datetime.date priority: Priority = Priority.no_priority class TaskShow(TaskDefault): title: str deadline: datetime.date priority: Priority time_spent: Optional[int] = None class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) time_spent: Optional[int] = None","title":"models.py"},{"location":"LR1/practices/#2","text":"\u0411\u044b\u043b\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e: \u041f\u043e\u0448\u0430\u0433\u043e\u0432\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0411\u0414, \u0410\u041f\u0418 \u0438 \u043c\u043e\u0434\u0435\u043b\u0438, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u0432\u043e\u0435\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u044b\u0432\u0430\u044f\u0441\u044c \u043d\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\u0445 \u0432 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 API \u0434\u043b\u044f many-to-many \u0441\u0432\u044f\u0437\u0435\u0439 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\u043c.","title":"\u041f\u04202"},{"location":"LR1/practices/#dbpy_1","text":"from sqlmodel import SQLModel, Session, create_engine db_url = 'postgresql://postgres:123@localhost:5432/pr2' engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session","title":"db.py"},{"location":"LR1/practices/#endpointspy","text":"import datetime from fastapi import APIRouter, HTTPException, Depends from models import * from db import get_session from typing_extensions import TypedDict from sqlmodel import SQLModel, create_engine from sqlmodel.sql.expression import select app_router = APIRouter() @app_router.post(\"/create_task\", tags=[\"tasks\"]) def create_task(task: Task, session=Depends(get_session)): session.add(task) session.commit() session.refresh(task) return {\"status\": 200, \"data\": task} @app_router.put(\"/update_task/{task_id}\", tags=[\"tasks\"]) def update_task(task_id: int, task: TaskUpdate, session=Depends(get_session)): db_task = session.get(Task, task_id) if not db_task: return ({'status': 404, 'data': 'Task not found'}) task_data = task.model_dump(exclude_unset=True) for key, value in task_data.items(): setattr(db_task, key, value) session.add(db_task) session.commit() session.refresh(db_task) return db_task @app_router.delete(\"/delete_task/{task_id}\", tags=[\"tasks\"]) def delete_task(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: return ({'status': 404, 'data': 'Task not found'}) session.delete(task) session.commit() return {\"ok\": True} @app_router.get(\"/tasks\", tags=[\"tasks\"],) def get_tasks(session=Depends(get_session)): return session.exec(select(Task)).all() @app_router.get(\"/task/{task_id}\", tags=[\"tasks\"]) def get_task(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: return ({'status': 404, 'data': 'Task not found'}) return task @app_router.get(\"/tasks/{task_id}/time\", tags=[\"tasks\"]) def get_task_time(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: return ({'status': 404, 'data': 'Task not found'}) return {\"time_spent\": task.time_spent} @app_router.put(\"/tasks/{task_id}/time\", tags=[\"tasks\"]) def track_time_spent(task_id: int, time_spent: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: return ({'status': 404, 'data': 'Task not found'}) task.time_spent = time_spent session.add(task) session.commit() session.refresh(task) return task","title":"endpoints.py"},{"location":"LR1/practices/#mainpy_1","text":"from fastapi import FastAPI import uvicorn from db import init_db from endpoints import app_router app = FastAPI() app.include_router(app_router, prefix=\"/api\", tags=[\"main\"]) @app.on_event(\"startup\") def on_startup(): init_db() if __name__ == '__main__': uvicorn.run('main:app', host=\"localhost\", port=8000, reload=True)","title":"main.py"},{"location":"LR1/practices/#modelspy_1","text":"import datetime from pydantic import BaseModel from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship class Priority(Enum): high = \"high\" medium = \"medium\" low = \"low\" no_priority = \"no_priority\" class TaskDefault(SQLModel): title: str description: Optional[str] = None deadline: datetime.date priority: Priority = Priority.no_priority class TaskShow(TaskDefault): title: str deadline: datetime.date priority: Priority time_spent: Optional[int] = None class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) time_spent: Optional[int] = None schedules: Optional[List[\"Schedule\"]] = Relationship(back_populates=\"task\") reminders: Optional[List[\"Reminder\"]] = Relationship(back_populates=\"task\") class ScheduleDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") date: datetime.date start_time: datetime.time end_time: datetime.time class ScheduleShow(ScheduleDefault): task: Optional[\"Task\"] = None class Schedule(ScheduleDefault, table=True): id: int = Field(default=None, primary_key=True) task: Optional[\"Task\"] = Relationship(back_populates=\"schedules\") class ReminderDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") remind_at: datetime.datetime class ReminderShow(ReminderDefault): task: Optional[Task] = None class Reminder(ReminderDefault, table=True): id: int = Field(default=None, primary_key=True) task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") task: Optional[\"Task\"] = Relationship(back_populates=\"reminders\")","title":"models.py"},{"location":"LR1/practices/#3","text":"\u0411\u044b\u043b\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0441\u0432\u043e\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0432\u0441\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0432 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u0420\u0430\u0437\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 alembic.ini URL \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e.env-\u0444\u0430\u0439\u043b\u0430 \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0434\u043e\u0431\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0443.","title":"\u041f\u04203"},{"location":"LR1/practices/#dbpy_2","text":"from sqlmodel import SQLModel, Session, create_engine db_url = 'postgresql://postgres:123@localhost:5432/pr3' engine = create_engine(db_url, echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session","title":"db.py"},{"location":"LR1/practices/#endpointspy_1","text":"import datetime from fastapi import APIRouter, HTTPException, Depends from models import ( TaskDefault, Task, TaskShow, ScheduleDefault, ScheduleShow, Schedule, ReminderDefault, ReminderShow, Reminder, ) from db import get_session from typing_extensions import TypedDict logic_router = APIRouter() @logic_router.post(\"/task-create\") def task_create(task: TaskDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Task}): task = Task.model_validate(task) session.add(task) session.commit() session.refresh(task) return {\"status\": 200, \"data\": task} @logic_router.get(\"/list-tasks\") def tasks_list(session=Depends(get_session)) -> list[Task]: return session.query(Task).all() @logic_router.get(\"/task/{task_id}\", response_model=TaskShow) def task_get(task_id: int, session=Depends(get_session)): obj = session.get(Task, task_id) if obj is None: raise HTTPException(status_code=404, detail=\"task not found\") return obj @logic_router.patch(\"/task/update/{task_id}\") def task_update(task_id: int, task: TaskDefault, session=Depends(get_session)) -> Task: db_task = session.get(Task, task_id) if not db_task: raise HTTPException(status_code=404, detail=\"task not found\") task_data = task.model_dump(exclude_unset=True) for key, value in task_data.items(): setattr(db_task, key, value) session.add(db_task) session.commit() session.refresh(db_task) return db_task @logic_router.delete(\"/task/delete/{task_id}\") def task_delete(task_id: int, session=Depends(get_session)): task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") session.delete(task) session.commit() return {\"ok\": True} @logic_router.post(\"/schedule-create\") def schedule_create(schedule: ScheduleDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Schedule}): schedule = Schedule.model_validate(schedule) session.add(schedule) session.commit() session.refresh(schedule) return {\"status\": 200, \"data\": schedule} @logic_router.get(\"/list-schedules\") def schedules_list(session=Depends(get_session)) -> list[Schedule]: return session.query(Schedule).all() @logic_router.get(\"/schedule/{schedule_id}\", response_model=ScheduleShow) def schedule_get(schedule_id: int, session=Depends(get_session)): obj = session.get(Schedule, schedule_id) if obj is None: raise HTTPException(status_code=404, detail=\"schedule not found\") return obj @logic_router.patch(\"/schedule/update/{schedule_id}\") def schedule_update(schedule_id: int, schedule: ScheduleDefault, session=Depends(get_session)) -> Schedule: db_schedule = session.get(Schedule, schedule_id) if not db_schedule: raise HTTPException(status_code=404, detail=\"schedule not found\") schedule_data = schedule.model_dump(exclude_unset=True) for key, value in schedule_data.items(): setattr(db_schedule, key, value) session.add(db_schedule) session.commit() session.refresh(db_schedule) return db_schedule @logic_router.delete(\"/schedule/delete/{schedule_id}\") def schedule_delete(schedule_id: int, session=Depends(get_session)): schedule = session.get(Schedule, schedule_id) if not schedule: raise HTTPException(status_code=404, detail=\"schedule not found\") session.delete(schedule) session.commit() return {\"ok\": True} @logic_router.post(\"/reminder-create\") def reminder_create(reminder: ReminderDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"data\": Reminder}): reminder = Reminder.model_validate(reminder) session.add(reminder) session.commit() session.refresh(reminder) return {\"status\": 200, \"data\": reminder} @logic_router.get(\"/list-reminders\") def reminders_list(session=Depends(get_session)) -> list[Reminder]: return session.query(Reminder).all() @logic_router.get(\"/reminder/{reminder_id}\", response_model=ReminderShow) def reminder_get(reminder_id: int, session=Depends(get_session)): obj = session.get(Reminder, reminder_id) if obj is None: raise HTTPException(status_code=404, detail=\"reminder not found\") return obj @logic_router.patch(\"/reminder/update/{reminder_id}\") def reminder_update(reminder_id: int, reminder: ReminderDefault, session=Depends(get_session)) -> Reminder: db_reminder = session.get(Reminder, reminder_id) if not db_reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") reminder_data = reminder.model_dump(exclude_unset=True) for key, value in reminder_data.items(): setattr(db_reminder, key, value) session.add(db_reminder) session.commit() session.refresh(db_reminder) return db_reminder @logic_router.delete(\"/reminder/delete/{reminder_id}\") def reminder_delete(reminder_id: int, session=Depends(get_session)): reminder = session.get(Reminder, reminder_id) if not reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") session.delete(reminder) session.commit() return {\"ok\": True} @logic_router.patch(\"/task/{task_id}/add-time\") def add_time_to_task(task_id: int, time_spent: int, session=Depends(get_session)) -> Task: task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") if task.time_spent is None: task.time_spent = 0 task.time_spent += time_spent session.add(task) session.commit() session.refresh(task) return task @logic_router.post(\"/reminder/{reminder_id}/copy-for-task/{task_id}\") def copy_reminder_for_task(reminder_id: int, task_id: int, session=Depends(get_session)): reminder = session.get(Reminder, reminder_id) if not reminder: raise HTTPException(status_code=404, detail=\"reminder not found\") task = session.get(Task, task_id) if not task: raise HTTPException(status_code=404, detail=\"task not found\") new_reminder = Reminder( task_id=task_id, remind_at=reminder.remind_at ) session.add(new_reminder) session.commit() session.refresh(new_reminder) return {\"status\": 200, \"message\": \"Reminder copied for new task successfully\"}","title":"endpoints.py"},{"location":"LR1/practices/#mainpy_2","text":"from fastapi import FastAPI import uvicorn from db import init_db from endpoints import logic_router app = FastAPI() app.include_router(logic_router, prefix=\"/api\", tags=[\"main\"]) @app.on_event(\"startup\") def on_startup(): init_db() if __name__ == \"__main__\": uvicorn.run(\"main:app\", host=\"localhost\", port=8000, reload=True)","title":"main.py"},{"location":"LR1/practices/#modelspy_2","text":"import datetime from pydantic import BaseModel from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship class Priority(Enum): high = \"high\" medium = \"medium\" low = \"low\" no_priority = \"no_priority\" class TaskDefault(SQLModel): title: str description: Optional[str] = None deadline: datetime.date priority: Priority = Priority.no_priority class TaskShow(TaskDefault): title: str deadline: datetime.date priority: Priority time_spent: Optional[int] = None class Task(TaskDefault, table=True): id: int = Field(default=None, primary_key=True) time_spent: Optional[int] = None schedules: Optional[List[\"Schedule\"]] = Relationship(back_populates=\"task\") reminders: Optional[List[\"Reminder\"]] = Relationship(back_populates=\"task\") class ScheduleDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") date: datetime.date start_time: datetime.time end_time: datetime.time class ScheduleShow(ScheduleDefault): task: Optional[\"Task\"] = None class Schedule(ScheduleDefault, table=True): id: int = Field(default=None, primary_key=True) task: Optional[\"Task\"] = Relationship(back_populates=\"schedules\") class ReminderDefault(SQLModel): task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") remind_at: datetime.datetime class ReminderShow(ReminderDefault): task: Optional[Task] = None class Reminder(ReminderDefault, table=True): id: int = Field(default=None, primary_key=True) task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") task: Optional[\"Task\"] = Relationship(back_populates=\"reminders\")","title":"models.py"},{"location":"LR2/task1/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python \u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0420\u0435\u0448\u0435\u043d\u0438\u0435: asynic.py import asyncio from time import time async def calculate_sum(args): global RESULT i_from, i_to = args s = sum(range(i_from, i_to)) RESULT += s async def main(n): step = 10**6 // n chunks = [(i, i + step) for i in range(1, 10**6, step)] if chunks[-1][1] != 10**6: chunks[-1] = (chunks[-1][0], 10**6) async with asyncio.TaskGroup() as tg: for chunk in chunks: tg.create_task(calculate_sum(chunk)) if __name__ == \"__main__\": start = time() RESULT = 0 asyncio.run(main(4)) print(\"Result:\", RESULT, \"Execution time:\", time() - start) Result: 499999500000 Execution time: 0.07601785659790039 mltprcs.py from multiprocessing import Pool from time import time def calculate_sum(args): i_from, i_to = args return sum(range(i_from, i_to)) if __name__ == \"__main__\": start = time() n = 4 with Pool(n) as p: step = 10**6 // n chunks = [(i, i + step) for i in range(1, 10**6, step)] if chunks[-1][1] != 10**6: chunks[-1] = (chunks[-1][0], 10**6) RESULT = sum(p.map(calculate_sum, chunks)) print(\"Result:\", RESULT) print(\"Execution time:\", time() - start) Result: 499999500000 Execution time: 0.688213586807251 thrd.py import threading from time import time lock = threading.Lock() def calculate_sum(i_from, i_to): global RESULT lock.acquire() RESULT += sum(range(i_from, i_to)) lock.release() if __name__ == \"__main__\": start = time() n = 4 RESULT = 0 step = 10**6 // n chunks = [(i, i + step) for i in range(1, 10**6, step)] if chunks[-1][1] != 10**6: chunks[-1] = (chunks[-1][0], 10**6) threads = [threading.Thread(target=calculate_sum, args=chunk) for chunk in chunks] for t in threads: t.start() for t in threads: t.join() print(\"Result:\", RESULT) print(\"Execution time:\", time() - start) Result: 499999500000 Execution time: 0.07540440559387207","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python"},{"location":"LR2/task1/#1-threading-multiprocessing-async-python","text":"\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python"},{"location":"LR2/task1/#_1","text":"","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435:"},{"location":"LR2/task1/#asynicpy","text":"import asyncio from time import time async def calculate_sum(args): global RESULT i_from, i_to = args s = sum(range(i_from, i_to)) RESULT += s async def main(n): step = 10**6 // n chunks = [(i, i + step) for i in range(1, 10**6, step)] if chunks[-1][1] != 10**6: chunks[-1] = (chunks[-1][0], 10**6) async with asyncio.TaskGroup() as tg: for chunk in chunks: tg.create_task(calculate_sum(chunk)) if __name__ == \"__main__\": start = time() RESULT = 0 asyncio.run(main(4)) print(\"Result:\", RESULT, \"Execution time:\", time() - start) Result: 499999500000 Execution time: 0.07601785659790039","title":"asynic.py"},{"location":"LR2/task1/#mltprcspy","text":"from multiprocessing import Pool from time import time def calculate_sum(args): i_from, i_to = args return sum(range(i_from, i_to)) if __name__ == \"__main__\": start = time() n = 4 with Pool(n) as p: step = 10**6 // n chunks = [(i, i + step) for i in range(1, 10**6, step)] if chunks[-1][1] != 10**6: chunks[-1] = (chunks[-1][0], 10**6) RESULT = sum(p.map(calculate_sum, chunks)) print(\"Result:\", RESULT) print(\"Execution time:\", time() - start) Result: 499999500000 Execution time: 0.688213586807251","title":"mltprcs.py"},{"location":"LR2/task1/#thrdpy","text":"import threading from time import time lock = threading.Lock() def calculate_sum(i_from, i_to): global RESULT lock.acquire() RESULT += sum(range(i_from, i_to)) lock.release() if __name__ == \"__main__\": start = time() n = 4 RESULT = 0 step = 10**6 // n chunks = [(i, i + step) for i in range(1, 10**6, step)] if chunks[-1][1] != 10**6: chunks[-1] = (chunks[-1][0], 10**6) threads = [threading.Thread(target=calculate_sum, args=chunk) for chunk in chunks] for t in threads: t.start() for t in threads: t.join() print(\"Result:\", RESULT) print(\"Execution time:\", time() - start) Result: 499999500000 Execution time: 0.07540440559387207","title":"thrd.py"},{"location":"LR2/task2/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse_and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u0435\u043d\u043d\u0438\u044f \u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0415\u0441\u043b\u0438 \u0412\u044b \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043e\u0442\u043a\u0443\u0434\u0430 \u0412\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044e \u0432 \u043e\u0431\u0449\u0435\u043c \u0447\u0430\u0442\u0435 \u043f\u043e\u0442\u043e\u043a\u0430. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0438 \u0438\u0445 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u041f\u0440\u043e\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 async.py import aiohttp import asyncio import asyncpg from bs4 import BeautifulSoup import time import sys import os sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) from urls import * async def save_to_db(data): conn = await asyncpg.connect(\"postgresql://postgres:123@localhost:5434/123\") try: await conn.execute( \"INSERT INTO site (url, title) VALUES ($1, $2)\", data[\"url\"], data[\"title\"] ) finally: await conn.close() async def get_data(url, session): async with session.get(url) as response: return await response.text() async def parse_and_save(url): async with aiohttp.ClientSession() as session: html = await get_data(url, session) soup = BeautifulSoup(html, \"html.parser\") title = soup.find(\"title\").text await save_to_db({\"url\": url, \"title\": title}) async def main(urls): tasks = [] for url in urls: task = asyncio.create_task(parse_and_save(url)) tasks.append(task) await asyncio.gather(*tasks) if __name__ == \"__main__\": start_time = time.time() asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy()) asyncio.run(main(urls)) end_time = time.time() execution_time = end_time - start_time file = open(\"times.txt\", \"a\") file.write(f\"Async time: {execution_time}\\n\") mtlprcs.py from multiprocessing import Pool import requests from bs4 import BeautifulSoup import psycopg2 import time import sys import os sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) from urls import * def parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.text, \"html.parser\") title = soup.find(\"title\").text conn = psycopg2.connect(\"postgresql://postgres:123@localhost:5434/123\") curs = conn.cursor() curs.execute(\"INSERT INTO site (url, title) VALUES (%s, %s)\", (url, title)) conn.commit() curs.close() conn.close() def main(urls): num_process = len(urls) if len(urls) < 4 else 4 pool = Pool(processes=num_process) pool.map(parse_and_save, urls) if __name__ == \"__main__\": start_time = time.time() main(urls) end_time = time.time() execution_time = end_time - start_time file = open(\"times.txt\", \"a\") file.write(f\"Multiprocessing time: {execution_time}\\n\") thrd.py from threading import Thread import requests from bs4 import BeautifulSoup import psycopg2 import time import sys import os sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) from urls import * def parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.text, \"html.parser\") title = soup.find(\"title\").text conn = psycopg2.connect(\"postgresql://postgres:123@localhost:5434/123\") curs = conn.cursor() curs.execute(\"INSERT INTO site (url, title) VALUES (%s, %s)\", (url, title)) conn.commit() curs.close() conn.close() def main(urls): threads = [] for url in urls: thread = Thread(target=parse_and_save, args=(url,)) threads.append(thread) thread.start() for thread in threads: thread.join() if __name__ == \"__main__\": start_time = time.time() main(urls) end_time = time.time() execution_time = end_time - start_time file = open(\"times.txt\", \"a\") file.write(f\"Threading time: {execution_time}\\n\") db.py from sqlmodel import SQLModel, create_engine, Field, Session from dotenv import load_dotenv import os load_dotenv() db_url = os.getenv(\"DB_URL\") engine = create_engine(db_url, echo=True) def create_database_session() -> Session: return Session(bind=engine) def init_db() -> None: SQLModel.metadata.create_all(engine) class Site(SQLModel, table=True): id: int = Field(primary_key=True) url: str title: str init_db() urls.py urls = [ 'https://career.habr.com/vacancies?qid=1&type=all', 'https://career.habr.com/vacancies?q=%D0%B0%D0%BD%D0%B0%D0%BB%D0%B8%D1%82%D0%B8%D0%BA%20%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85&qid=3&type=all', 'https://career.habr.com/vacancies?q=python%20&qid=3&type=all', ] times.txt Async time: 0.8929193019866943 Multiprocessing time: 1.5150933265686035 Threading time: 0.8133041858673096","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"LR2/task2/#2-","text":"\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse_and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u0435\u043d\u043d\u0438\u044f \u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0415\u0441\u043b\u0438 \u0412\u044b \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043e\u0442\u043a\u0443\u0434\u0430 \u0412\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044e \u0432 \u043e\u0431\u0449\u0435\u043c \u0447\u0430\u0442\u0435 \u043f\u043e\u0442\u043e\u043a\u0430. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0438 \u0438\u0445 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u041f\u0440\u043e\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"LR2/task2/#_1","text":"","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"LR2/task2/#asyncpy","text":"import aiohttp import asyncio import asyncpg from bs4 import BeautifulSoup import time import sys import os sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) from urls import * async def save_to_db(data): conn = await asyncpg.connect(\"postgresql://postgres:123@localhost:5434/123\") try: await conn.execute( \"INSERT INTO site (url, title) VALUES ($1, $2)\", data[\"url\"], data[\"title\"] ) finally: await conn.close() async def get_data(url, session): async with session.get(url) as response: return await response.text() async def parse_and_save(url): async with aiohttp.ClientSession() as session: html = await get_data(url, session) soup = BeautifulSoup(html, \"html.parser\") title = soup.find(\"title\").text await save_to_db({\"url\": url, \"title\": title}) async def main(urls): tasks = [] for url in urls: task = asyncio.create_task(parse_and_save(url)) tasks.append(task) await asyncio.gather(*tasks) if __name__ == \"__main__\": start_time = time.time() asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy()) asyncio.run(main(urls)) end_time = time.time() execution_time = end_time - start_time file = open(\"times.txt\", \"a\") file.write(f\"Async time: {execution_time}\\n\")","title":"async.py"},{"location":"LR2/task2/#mtlprcspy","text":"from multiprocessing import Pool import requests from bs4 import BeautifulSoup import psycopg2 import time import sys import os sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) from urls import * def parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.text, \"html.parser\") title = soup.find(\"title\").text conn = psycopg2.connect(\"postgresql://postgres:123@localhost:5434/123\") curs = conn.cursor() curs.execute(\"INSERT INTO site (url, title) VALUES (%s, %s)\", (url, title)) conn.commit() curs.close() conn.close() def main(urls): num_process = len(urls) if len(urls) < 4 else 4 pool = Pool(processes=num_process) pool.map(parse_and_save, urls) if __name__ == \"__main__\": start_time = time.time() main(urls) end_time = time.time() execution_time = end_time - start_time file = open(\"times.txt\", \"a\") file.write(f\"Multiprocessing time: {execution_time}\\n\")","title":"mtlprcs.py"},{"location":"LR2/task2/#thrdpy","text":"from threading import Thread import requests from bs4 import BeautifulSoup import psycopg2 import time import sys import os sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) from urls import * def parse_and_save(url): response = requests.get(url) soup = BeautifulSoup(response.text, \"html.parser\") title = soup.find(\"title\").text conn = psycopg2.connect(\"postgresql://postgres:123@localhost:5434/123\") curs = conn.cursor() curs.execute(\"INSERT INTO site (url, title) VALUES (%s, %s)\", (url, title)) conn.commit() curs.close() conn.close() def main(urls): threads = [] for url in urls: thread = Thread(target=parse_and_save, args=(url,)) threads.append(thread) thread.start() for thread in threads: thread.join() if __name__ == \"__main__\": start_time = time.time() main(urls) end_time = time.time() execution_time = end_time - start_time file = open(\"times.txt\", \"a\") file.write(f\"Threading time: {execution_time}\\n\")","title":"thrd.py"},{"location":"LR2/task2/#dbpy","text":"from sqlmodel import SQLModel, create_engine, Field, Session from dotenv import load_dotenv import os load_dotenv() db_url = os.getenv(\"DB_URL\") engine = create_engine(db_url, echo=True) def create_database_session() -> Session: return Session(bind=engine) def init_db() -> None: SQLModel.metadata.create_all(engine) class Site(SQLModel, table=True): id: int = Field(primary_key=True) url: str title: str init_db()","title":"db.py"},{"location":"LR2/task2/#urlspy","text":"urls = [ 'https://career.habr.com/vacancies?qid=1&type=all', 'https://career.habr.com/vacancies?q=%D0%B0%D0%BD%D0%B0%D0%BB%D0%B8%D1%82%D0%B8%D0%BA%20%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85&qid=3&type=all', 'https://career.habr.com/vacancies?q=python%20&qid=3&type=all', ]","title":"urls.py"},{"location":"LR2/task2/#timestxt","text":"Async time: 0.8929193019866943 Multiprocessing time: 1.5150933265686035 Threading time: 0.8133041858673096","title":"times.txt"},{"location":"LR3/task1/","text":"\u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Docker \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 2 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043f\u043e http \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 FastAPI \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u043b\u0438 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 socket \u0438\u043b\u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u043c\u0438. from fastapi import FastAPI, BackgroundTasks from parse import parse_and_save from database import get_session from fastapi import Depends, status from schemas import Parce app = FastAPI() @app.post(\"/parse/\") async def parse( url: str, background_tasks: BackgroundTasks, session=Depends(get_session) ): background_tasks.add_task(parse_and_save, url, session) return {\"message\": \"Parse started.\"} @app.get(\"/get-tasks/\") def cases_list(session=Depends(get_session)) -> list[Parce]: return session.query(Parce).all() \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Dockerfile \u0427\u0442\u043e\u0431\u044b \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0442\u0440\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430: \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0434\u043b\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0434\u043b\u044f FastAPI-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0414\u043b\u044f \u0438\u0445 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u0434\u0432\u0430 Dockerfile, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0437\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u044b\u043b\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u043f\u0440\u044f\u043c\u043e\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0432 docker-compose \u0444\u0430\u0439\u043b\u0435: App Dockerfile FROM python:3.11-slim WORKDIR /parser_api COPY requirements.txt requirements.txt RUN pip install --no-cache-dir --upgrade -r requirements.txt COPY . . EXPOSE 8080 CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"] Celery Dockerfile ``` FROM python:3.10-alpine3.19 WORKDIR /run_celery COPY . . RUN pip3 install -r requirements.txt CMD uvicorn main:app --host localhost --port 8001 ``` \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 docker-compose version: '3.8' services: fastapi_app: build: context: ./app dockerfile: Dockerfile ports: - \"8000:80\" env_file: - .env depends_on: - db networks: - backend parser_api: build: context: ./parser_api dockerfile: Dockerfile ports: - \"8080:8080\" env_file: - .env depends_on: - db - redis networks: - backend db: image: postgres restart: always environment: POSTGRES_USER: ${DB_USER} POSTGRES_PASSWORD: ${DB_PASSWORD} POSTGRES_DB: ${DB_NAME} ports: - \"5432:5432\" volumes: - postgres_data:/var/lib/postgresql/data networks: - backend redis: image: redis:6 ports: - \"6379:6379\" networks: - backend celery_worker: build: context: ./parser_api dockerfile: Dockerfile command: [\"celery\", \"-A\", \"celery_main.celery_app\", \"worker\", \"--loglevel=info\"] env_file: - .env depends_on: - redis - db networks: - backend pgadmin: image: dpage/pgadmin4 restart: always environment: PGADMIN_DEFAULT_EMAIL: admin@example.com PGADMIN_DEFAULT_PASSWORD: admin ports: - \"5050:80\" depends_on: - db networks: - backend volumes: postgres_data: networks: backend: driver: bridge","title":"\u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Docker"},{"location":"LR3/task1/#fastapi-docker","text":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445: \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 2","title":"\u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Docker"},{"location":"LR3/task1/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043f\u043e http \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 FastAPI \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u043b\u0438 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 socket \u0438\u043b\u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u043c\u0438. from fastapi import FastAPI, BackgroundTasks from parse import parse_and_save from database import get_session from fastapi import Depends, status from schemas import Parce app = FastAPI() @app.post(\"/parse/\") async def parse( url: str, background_tasks: BackgroundTasks, session=Depends(get_session) ): background_tasks.add_task(parse_and_save, url, session) return {\"message\": \"Parse started.\"} @app.get(\"/get-tasks/\") def cases_list(session=Depends(get_session)) -> list[Parce]: return session.query(Parce).all()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430"},{"location":"LR3/task1/#dockerfile","text":"\u0427\u0442\u043e\u0431\u044b \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0442\u0440\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430: \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0434\u043b\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0434\u043b\u044f FastAPI-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0414\u043b\u044f \u0438\u0445 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u0434\u0432\u0430 Dockerfile, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0437\u0430 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u044b\u043b\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u043f\u0440\u044f\u043c\u043e\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435 \u0432 docker-compose \u0444\u0430\u0439\u043b\u0435:","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 Dockerfile"},{"location":"LR3/task1/#app-dockerfile","text":"FROM python:3.11-slim WORKDIR /parser_api COPY requirements.txt requirements.txt RUN pip install --no-cache-dir --upgrade -r requirements.txt COPY . . EXPOSE 8080 CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"]","title":"App Dockerfile"},{"location":"LR3/task1/#celery-dockerfile","text":"``` FROM python:3.10-alpine3.19 WORKDIR /run_celery COPY . . RUN pip3 install -r requirements.txt CMD uvicorn main:app --host localhost --port 8001 ```","title":"Celery Dockerfile"},{"location":"LR3/task1/#docker-compose","text":"version: '3.8' services: fastapi_app: build: context: ./app dockerfile: Dockerfile ports: - \"8000:80\" env_file: - .env depends_on: - db networks: - backend parser_api: build: context: ./parser_api dockerfile: Dockerfile ports: - \"8080:8080\" env_file: - .env depends_on: - db - redis networks: - backend db: image: postgres restart: always environment: POSTGRES_USER: ${DB_USER} POSTGRES_PASSWORD: ${DB_PASSWORD} POSTGRES_DB: ${DB_NAME} ports: - \"5432:5432\" volumes: - postgres_data:/var/lib/postgresql/data networks: - backend redis: image: redis:6 ports: - \"6379:6379\" networks: - backend celery_worker: build: context: ./parser_api dockerfile: Dockerfile command: [\"celery\", \"-A\", \"celery_main.celery_app\", \"worker\", \"--loglevel=info\"] env_file: - .env depends_on: - redis - db networks: - backend pgadmin: image: dpage/pgadmin4 restart: always environment: PGADMIN_DEFAULT_EMAIL: admin@example.com PGADMIN_DEFAULT_PASSWORD: admin ports: - \"5050:80\" depends_on: - db networks: - backend volumes: postgres_data: networks: backend: driver: bridge","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 docker-compose"},{"location":"LR3/task2/","text":"\u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 FastAPI \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 : \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 URL \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0443 (\u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435) \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443. @app.post(\"/parse\") def parse(url: str, background_tasks: BackgroundTasks, session=Depends(get_session)): try: background_tasks.add_task(parse_and_save, url, session) except Exception as e: raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e)) return {\"message\": \"Parsing started\"}","title":"\u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI"},{"location":"LR3/task2/#fastapi","text":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 FastAPI \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 : \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 URL \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0443 (\u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435) \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443. @app.post(\"/parse\") def parse(url: str, background_tasks: BackgroundTasks, session=Depends(get_session)): try: background_tasks.add_task(parse_and_save, url, session) except Exception as e: raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e)) return {\"message\": \"Parsing started\"}","title":"\u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI"},{"location":"LR3/task3/","text":"\u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c Celery \u0432 FastAPI from celery import Celery celery_app = Celery( \"worker\", broker=os.getenv(\"CELERY_BROKER_URL\", \"redis://redis:6379/0\"), backend=os.getenv(\"CELERY_RESULT_BACKEND\", \"redis://redis:6379/0\"), ) celery_app.conf.update( task_routes={ \"url_parser.parse_and_save\": \"main-queue\", }, ) \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0441 Celery @celery_app.task def parse_and_save(url, session): response = requests.get(url) soup = BeautifulSoup(response.content, \"html.parser\") title = soup.title.string if soup.title else \"No title\" new_article = Parse(url=url, article_title=title) session.add(new_article) session.commit()","title":"\u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c"},{"location":"LR3/task3/#fastapi","text":"","title":"\u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c"},{"location":"LR3/task3/#celery-fastapi","text":"from celery import Celery celery_app = Celery( \"worker\", broker=os.getenv(\"CELERY_BROKER_URL\", \"redis://redis:6379/0\"), backend=os.getenv(\"CELERY_RESULT_BACKEND\", \"redis://redis:6379/0\"), ) celery_app.conf.update( task_routes={ \"url_parser.parse_and_save\": \"main-queue\", }, )","title":"Celery \u0432 FastAPI"},{"location":"LR3/task3/#celery","text":"@celery_app.task def parse_and_save(url, session): response = requests.get(url) soup = BeautifulSoup(response.content, \"html.parser\") title = soup.title.string if soup.title else \"No title\" new_article = Parse(url=url, article_title=title) session.add(new_article) session.commit()","title":"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0441 Celery"}]}